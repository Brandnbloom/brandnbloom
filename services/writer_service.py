# services/writer_service.py
from services.openai_client import generate_text
import textwrap

def generate_seo_article(title: str, keywords: list[str], length: int = 600) -> str:
    """
    Basic SEO article generator. For production you may want templates,
    sections, meta description, headings, and internal link suggestions.
    """
    kw_str = ", ".join(keywords)
    prompt = f"""
Write an SEO-optimized article of about {length} words on the topic: "{title}".
Include the following keywords naturally: {kw_str}.
Structure the article with an intro, 3-5 subheadings (H2), short paragraphs, and a conclusion.
Also output a meta description (max 160 chars) and 5 suggested SEO-friendly titles.
Provide the article only.
"""
    return generate_text(prompt, max_tokens=int(length*2))

def paraphrase_text(text: str) -> str:
    prompt = f"Paraphrase the following text, preserving meaning and tone:\n\n{text}\n\nParaphrase:"
    return generate_text(prompt, temperature=0.4, max_tokens=400)

def grammar_check(text: str) -> dict:
    """
    Quick grammar correction using OpenAI.
    Returns original vs corrected.
    """
    prompt = (
        "Correct grammar, punctuation, and improve readability. "
        "Provide 'Corrected' only as final output. Do not add commentary.\n\n"
        f"Text:\n{text}\n\nCorrected:"
    )
    corrected = generate_text(prompt, temperature=0.0, max_tokens=400)
    return {"original": text, "corrected": corrected.strip()}

def ai_detect(text: str) -> float:
    """
    Lightweight classifier: asks model to rate probability that input is AI-generated.
    This is NOT a bulletproof detector â€” for production use specialized detectors.
    Returns a probability 0-1.
    """
    prompt = (
        "You are an assistant that estimates the probability that a given text was generated by an AI. "
        "Respond with a single JSON object: {\"ai_probability\": <float between 0 and 1>} and nothing else.\n\n"
        f"Text:\n{text}"
    )
    resp = generate_text(prompt, temperature=0.0, max_tokens=30)
    # try to parse number out of response
    import re, json
    m = re.search(r"\{.*\}", resp)
    if m:
        try:
            data = json.loads(m.group(0))
            return float(data.get("ai_probability", 0.0))
        except Exception:
            pass
    # fallback: if not parseable, return 0.5
    return 0.5

def humanize_text(text: str) -> str:
    prompt = (
        "Rewrite this text to make it feel more natural, conversational, and human. Keep meaning intact and do not add new facts.\n\n"
        f"Text:\n{text}\n\nHumanized version:"
    )
    return generate_text(prompt, temperature=0.7, max_tokens=400)
